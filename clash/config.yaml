# 机场订阅配置
proxy-providers:
  Halo: 
    url: "https://sub-halo-zone-373zezn3ce9e-1337395636.eo-edgefunctions1.com/api/v1/portal/tenant?token=4744b30f1c68b6d551609a7d5edf4e96" 
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连 
    override:
      udp: true
  Airdeer: 
    url: "https://plana.ilu-subscription.com/s/a36045edfd5659a6333e597e45e33a85" 
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连 
    override:
      udp: true


# 手动配置的代理节点信息
proxies:
  - {name: 直连, type: direct}

# 全局配置项
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: false 
unified-delay: true
tcp-concurrent: true
log-level: warning # 日常使用设置为 warning，排错时可改为 info 或 debug
find-process-mode: 'off' 
# interface-name: en0 # 如需指定出口网卡，请取消注释并正确配置
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
disable-keep-alive: false

# GeoData (地理位置数据库) 相关配置
# 建议启用 GeoData 自动更新以获取最新的地理位置和站点数据
geox-url:
  geoip: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip-lite.dat"
  geosite: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geosite.dat"
  mmdb: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/country-lite.mmdb"
  asn: "https://mirror.ghproxy.com/https://github.com/xishang0128/geoip/releases/download/latest/GeoLite2-ASN.mmdb"
geo-auto-update: true 
geo-update-interval: 24 # 每天更新一次

# 用户界面选择持久化配置
profile:
  store-selected: true
  store-fake-ip: true

# 外部控制 (API 和 Web UI) 配置
external-controller: 0.0.0.0:9090
secret: "Anfeng1314!" 
# external-ui: "/etc/mihomo/run/ui"
# external-ui-name: zashboard
# external-ui-url: "https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"

# 流量嗅探 (Sniffer) 配置
sniffer:
  enable: true
  sniff:
    HTTP: 
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC: # QUIC 协议也常用于 HTTPS，加入嗅探有助于识别
      ports: [443, 8443]
  force-domain: # 强制嗅探特定域名
    - "+.v2ex.com"
  skip-domain: # 跳过嗅探特定域名
    - "+.baidu.com" 

# TUN 模式入站配置
tun:
  enable: true
  stack: mixed 
  dns-hijack: ["any:53", "tcp://any:53"] 
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true
  # (可选) 手动为 TUN 接口配置 IP 地址，某些系统或 stack 设置下可能需要
  # inet4-address: ['198.19.0.1/30'] 
  # inet6-address: ['fdfe:dcba:9877::1/126']


# DNS 配置模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true # 如果遇到问题，可以尝试临时改为 false 进行排查
  enhanced-mode: fake-ip
  cache-algorithm: arc
  use-hosts: false
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "rule-set:private_domain"
    - "rule-set:cn_domain"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    - "time.*.com"
    - "*.ntp.org.cn"
    - "*.pool.ntp.org"

  # default-nameserver 用于解析其他 DNS 服务器的域名及 Clash 自身启动所需。
  # 必须使用纯 IP 地址。
  default-nameserver:
    - 223.5.5.5       # 阿里云 DNS
    - 119.29.29.29    # DNSPod DNS
    - 114.114.114.114 # 114 DNS
    - 1.0.0.1         # Cloudflare DNS (用于解析境外服务器域名)
    - 8.8.8.8         # Google DNS (用于解析境外服务器域名)

  # proxy-server-nameserver 用于解析代理服务器的域名。
  # 改为纯IP DNS后，解析代理服务器域名也可能受污染。
  proxy-server-nameserver:
    - 223.5.5.5
    - 119.29.29.29
    - https://223.5.5.5/dns-query 
    # - https://dns.alidns.com/dns-query
    # - https://doh.pub/dns-query
    # - tls://1.1.1.1:853

  # nameserver 是主要的上游DNS服务器。
  # 全部改为纯IP DNS。
  nameserver:
    - 223.5.5.5       # 阿里云 DNS
    - 119.29.29.29    # DNSPod DNS
    - 114.114.114.114 # 114 DNS
    # - tls://dns.alidns.com:853
    # - tls://doh.pub:853
    # - tls://dns.rubyfish.cn:853

  # fallback DNS 在 nameserver 解析结果不佳或被污染时使用。
  # 如果fallback也改为纯IP，抗污染能力会大幅下降。
  # 建议至少保留部分境外纯IP DNS。
  fallback:
    - 1.1.1.1         # Cloudflare DNS
    - 8.8.8.8         # Google DNS
    - 9.9.9.9         # Quad9 DNS
    # - tls://1.1.1.1:853
    # - tls://8.8.8.8:853
    # - tls://9.9.9.9:853
    # - https://cloudflare-dns.com/dns-query
    # - https://dns.google/dns-query

  # fallback-filter 定义触发 fallback DNS 的条件。
  # 即使使用纯IP fallback，此过滤器仍然会尝试在主DNS解析到CN IP时切换。
  fallback-filter:
    geoip: true
    geoip-code: CN

  # nameserver-policy 允许为特定域名或规则集指定DNS服务器或解析行为。
  # 这里也需要将加密DNS替换为纯IP DNS。
  nameserver-policy:
    'geosite:tencent': ['223.5.5.5', '119.29.29.29', '117.50.10.10'] # 腾讯服务，使用国内纯IP DNS
    '*.gcloudsdk.com': ['223.5.5.5', '119.29.29.29']
    '*.gcloudcs.com': ['223.5.5.5', '119.29.29.29']
    'geosite:cn,private': ['223.5.5.5', '119.29.29.29'] # 国内和私有域名
    'geosite:apple-cn': ['223.5.5.5', '119.29.29.29']    # 苹果中国服务
    # - tls://dns.alidns.com:853 # 从策略中移除或注释所有tls和https开头的DNS
    # - tls://doh.pub:853
    'geosite:category-ads-all': rcode://success # DNS级别广告拦截

# 出站策略组 (Proxy Groups) - 此部分完全沿用您 config-user.yaml 中的配置，不做改动
# --- 锚点定义 ---
pr: &pr {type: select, proxies: [
  '🚀 默认代理', 
  '🇭🇰 香港-场景', 
  '🇹🇼 台湾-场景', 
  '🇯🇵 日本-场景', 
  '🇸🇬 新加坡-场景', 
  '🇺🇲 美国-场景', 
  '🌐 其他地区-场景', 
  '♻️ 自动选择', 
  '🌐 全部节点', 
  '直连'       
]}

# --- 策略组定义 ---
proxy-groups:
  # 1. 核心默认代理组
  - name: '🚀 默认代理'
    type: select
    proxies:
      - '♻️ 自动选择'
      - '🇭🇰 香港-场景'
      - '🇯🇵 日本-场景'
      - '🇺🇲 美国-场景'
      - '🇸🇬 新加坡-场景'
      - '🇹🇼 台湾-场景'
      - '🌐 其他地区-场景'
      - '🌐 全部节点' 
      - '直连'       

  # 2. 全局自动选择和全部节点组
  - name: '♻️ 自动选择' 
    type: url-test
    url: https://www.gstatic.com/generate_204 
    interval: 300 
    tolerance: 50 
    include-all: true 
    filter: "^((?!(直连|流量|套餐|重置|官网|剩余)).)*$" 
  - name: '🌐 全部节点' 
    type: select
    include-all: true 

  # 3. 应用分流的策略组 (使用 pr 锚点)
  - name: '📹 YouTube'
    <<: *pr 
  - name: '🍀 Google'
    <<: *pr
  - name: '🤖 ChatGPT'
    <<: *pr
  - name: '👨🏿‍💻 GitHub'
    <<: *pr
  - name: '🐬 OneDrive'
    <<: *pr
  - name: '🪟 Microsoft'
    <<: *pr
  - name: '🎵 TikTok'
    <<: *pr
  - name: '📲 Telegram'
    <<: *pr
  - name: '🎥 NETFLIX'
    <<: *pr
  - name: '✈️ Speedtest'
    <<: *pr
  - name: '💶 PayPal'
    <<: *pr
  - name: '🍎 Apple'
    <<: *pr
  - name: '⚜️ 腾讯专属' 
    type: select
    proxies:
      - '直连'
      - '🇭🇰 香港-场景' 
      - '🇹🇼 台湾-场景'

  # 4. 场景和地区的策略组
  # 香港地区
  - name: '🇭🇰 香港-场景'
    type: select
    proxies: ['🇭🇰 香港-自动', '🇭🇰 香港-手动', '🇭🇰 香港-故障转移', '🇭🇰 香港-负载均衡']
  - name: '🇭🇰 香港-自动' 
    type: url-test
    url: https://www.gstatic.com/generate_204
    interval: 300
    tolerance: 20 
    include-all: true 
    filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$" 
  - name: '🇭🇰 香港-手动' 
    type: select
    include-all: true
    filter: "(?i)港|hk|hongkong|hong kong" 
  - name: '🇭🇰 香港-故障转移' 
    type: fallback
    url: https://www.gstatic.com/generate_204
    interval: 300
    tolerance: 20 
    include-all: true
    filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"
  - name: '🇭🇰 香港-负载均衡' 
    type: load-balance
    url: https://www.gstatic.com/generate_204 
    interval: 300
    strategy: round-robin 
    include-all: true
    filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"
  # 台湾地区
  - name: '🇹🇼 台湾-场景'
    type: select
    proxies: ['🇹🇼 台湾-自动', '🇹🇼 台湾-手动', '🇹🇼 台湾-故障转移', '🇹🇼 台湾-负载均衡']
  - name: '🇹🇼 台湾-自动'
    type: url-test
    url: https://www.gstatic.com/generate_204
    interval: 300
    tolerance: 30
    include-all: true
    filter: "(?i)台|tw|taiwan|formosa|台湾|台灣"
  - name: '🇹🇼 台湾-手动'
    type: select
    include-all: true
    filter: "(?i)台|tw|taiwan|formosa|台湾|台灣"
  - name: '🇹🇼 台湾-故障转移'
    type: fallback
    url: https://www.gstatic.com/generate_204
    interval: 300
    tolerance: 20
    include-all: true
    filter: "(?i)台|tw|taiwan|formosa|台湾|台灣"
  - name: '🇹🇼 台湾-负载均衡'
    type: load-balance
    url: https://www.gstatic.com/generate_204
    interval: 300
    strategy: round-robin
    include-all: true
    filter: "(?i)台|tw|taiwan|formosa|台湾|台灣"
  # 日本地区
  - name: '🇯🇵 日本-场景'
    type: select
    proxies: ['🇯🇵 日本-自动', '🇯🇵 日本-手动', '🇯🇵 日本-故障转移', '🇯🇵 日本-负载均衡']
  - name: '🇯🇵 日本-自动' 
    type: url-test
    url: https://www.gstatic.com/generate_204
    interval: 300
    tolerance: 20
    include-all: true
    filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$"
  - name: '🇯🇵 日本-手动' 
    type: select
    include-all: true
    filter: "(?i)日|jp|japan"
  - name: '🇯🇵 日本-故障转移' 
    type: fallback
    url: https://www.gstatic.com/generate_204
    interval: 300
    tolerance: 20
    include-all: true
    filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$"
  - name: '🇯🇵 日本-负载均衡'
    type: load-balance
    url: https://www.gstatic.com/generate_204
    interval: 300
    strategy: round-robin
    include-all: true
    filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$"
  # 新加坡地区
  - name: '🇸🇬 新加坡-场景'
    type: select
    proxies: ['🇸🇬 新加坡-自动', '🇸🇬 新加坡-手动', '🇸🇬 新加坡-故障转移', '🇸🇬 新加坡-负载均衡']
  - name: '🇸🇬 新加坡-自动'
    type: url-test
    url: https://www.gstatic.com/generate_204
    interval: 300
    tolerance: 30
    include-all: true
    filter: "(?i)新|sg|singapore|狮城|lion city"
  - name: '🇸🇬 新加坡-手动'
    type: select
    include-all: true
    filter: "(?i)新|sg|singapore|狮城|lion city"
  - name: '🇸🇬 新加坡-故障转移'
    type: fallback
    url: https://www.gstatic.com/generate_204
    interval: 300
    tolerance: 20
    include-all: true
    filter: "(?i)新|sg|singapore|狮城|lion city"
  - name: '🇸🇬 新加坡-负载均衡'
    type: load-balance
    url: https://www.gstatic.com/generate_204
    interval: 300
    strategy: round-robin
    include-all: true
    filter: "(?i)新|sg|singapore|狮城|lion city"
  # 美国地区
  - name: '🇺🇲 美国-场景'
    type: select
    proxies: ['🇺🇲 美国-自动', '🇺🇲 美国-手动', '🇺🇲 美国-故障转移', '🇺🇲 美国-负载均衡']
  - name: '🇺🇲 美国-自动' 
    type: url-test
    url: https://www.gstatic.com/generate_204
    interval: 300
    tolerance: 20 
    include-all: true
    filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$"
  - name: '🇺🇲 美国-手动' 
    type: select
    include-all: true
    filter: "(?i)美|us|unitedstates|united states|america"
  - name: '🇺🇲 美国-故障转移' 
    type: fallback
    url: https://www.gstatic.com/generate_204
    interval: 300
    tolerance: 20
    include-all: true
    filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$"
  - name: '🇺🇲 美国-负载均衡'
    type: load-balance
    url: https://www.gstatic.com/generate_204
    interval: 300
    strategy: round-robin
    include-all: true
    filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$"
  # 其他地区
  - name: '🌐 其他地区-场景'
    type: select
    proxies: ['🌐 其他地区-自动', '🌐 其他地区-手动', '🌐 其他地区-故障转移', '🌐 其他地区-负载均衡']
  - name: '🌐 其他地区-自动'
    type: url-test
    url: https://www.gstatic.com/generate_204
    interval: 360
    tolerance: 100
    include-all: true 
    filter: "(?i)^(?!.*(港|hk|hongkong|hong kong|台|tw|taiwan|台湾|台灣|formosa|日|jp|japan|新|sg|singapore|狮城|lion city|美|us|united states|america|直连|流量|套餐|重置|官网|剩余)).*$"
  - name: '🌐 其他地区-手动'
    type: select
    include-all: true
    filter: "(?i)^(?!.*(港|hk|hongkong|hong kong|台|tw|taiwan|台湾|台灣|formosa|日|jp|japan|新|sg|singapore|狮城|lion city|美|us|united states|america|直连|流量|套餐|重置|官网|剩余)).*$"
  - name: '🌐 其他地区-故障转移'
    type: fallback
    url: https://www.gstatic.com/generate_204
    interval: 360
    tolerance: 20
    include-all: true
    filter: "(?i)^(?!.*(港|hk|hongkong|hong kong|台|tw|taiwan|台湾|台灣|formosa|日|jp|japan|新|sg|singapore|狮城|lion city|美|us|united states|america|直连|流量|套餐|重置|官网|剩余)).*$"
  - name: '🌐 其他地区-负载均衡'
    type: load-balance
    url: https://www.gstatic.com/generate_204
    interval: 360
    strategy: round-robin
    include-all: true
    filter: "(?i)^(?!.*(港|hk|hongkong|hong kong|台|tw|taiwan|台湾|台灣|formosa|日|jp|japan|新|sg|singapore|狮城|lion city|美|us|united states|america|直连|流量|套餐|重置|官网|剩余)).*$"

  # 5. 全球直连和漏网之鱼
  - name: '🎯 全球直连' 
    type: select
    proxies: ['直连']
  - name: '🐟 漏网之鱼' 
    <<: *pr 

# 规则匹配 (Rules) - 基于您提供的顺序
rules:
  - RULE-SET,category-ads-all,REJECT 
  - RULE-SET,tencent_services,⚜️ 腾讯专属 # 腾讯服务规则优先
  - DOMAIN-SUFFIX,cfm.qq.com,⚜️ 腾讯专属
  - DOMAIN-SUFFIX,cfmdc.qq.com,⚜️ 腾讯专属
  - DOMAIN-SUFFIX,gcloudsdk.com,⚜️ 腾讯专属
  - DOMAIN-SUFFIX,gcloudcs.com,⚜️ 腾讯专属
  - DOMAIN-SUFFIX,tencentgames.com,⚜️ 腾讯专属 
  - DOMAIN-SUFFIX,wegame.com,⚜️ 腾讯专属
  - DOMAIN-KEYWORD,穿越火线,⚜️ 腾讯专属
  - DOMAIN-KEYWORD,cf手游,⚜️ 腾讯专属
  - DOMAIN-SUFFIX,qichiyu.com,🚀 默认代理 
  - RULE-SET,private_domain,🎯 全球直连 
  - GEOIP,LAN,🎯 全球直连,no-resolve 
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,proxylite,🚀 默认代理 
  - RULE-SET,ai,🤖 ChatGPT
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_cn_domain,🍀 Google # Google中国服务
  - RULE-SET,google_domain,🍀 Google # Google国际服务
  - RULE-SET,onedrive_domain,🐬 OneDrive
  - RULE-SET,microsoft_domain,🪟 Microsoft 
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,paypal_domain,💶 PayPal
  - RULE-SET,gfw_domain,🚀 默认代理 # GFW列表
  - RULE-SET,geolocation-!cn,🚀 默认代理 # 非中国大陆域名
  - RULE-SET,cn_domain,🎯 全球直连 # 中国大陆域名
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_ip,🎯 全球直连 # 中国大陆IP  
  - MATCH,🐟 漏网之鱼

# 规则集定义 (Rule Providers) 
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
rule-providers: 
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  proxylite: { <<: *class, url: "https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/main/proxy.list"}
  ai: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"}
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}
  category-ads-all: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/category-ads-all.mrs"}
  google_cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google-cn.mrs"}
  tencent_services: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tencent.mrs"}
